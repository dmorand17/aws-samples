AWSTemplateFormatVersion: '2010-09-09'
Description: |-
  CloudFormation template to demonstrate a step function workflow
  Once the objects have been scanned, the step function will be invoked

Resources:

  # Create 2 KMS keys one for the source bucket and one for destination bucket
  KmsKeySourceBucket:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: 'KMS Key for Source Bucket'
      Enabled: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: 'key-default-1'
        Statement:
          - Sid: 'Enable IAM User Permissions'
            Effect: 'Allow'
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'

  KmsKeyDestinationBucket:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: 'KMS Key for Destination Bucket'
      Enabled: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: 'key-default-1'
        Statement:
          - Sid: 'Enable IAM User Permissions'
            Effect: 'Allow'
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'

  SourceBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${AWS::StackName}-source-bucket'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !GetAtt KmsKeySourceBucket.Arn
              SSEAlgorithm: aws:kms
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  DestinationBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${AWS::StackName}-destination-bucket'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !GetAtt KmsKeyDestinationBucket.Arn
              SSEAlgorithm: aws:kms
      VersioningConfiguration:
        Status: Enabled

  IngestionMappingTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${AWS::StackName}-ingestion-mapping'
      AttributeDefinitions:
        - AttributeName: lab
          AttributeType: S
      KeySchema:
        - AttributeName: lab
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  StepFunctionsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: StepFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:GetObjectTagging'
                  - 's3:PutObjectTagging'
                  - 's3:GetObjectVersionTagging'
                  - 's3:GetObjectAttributes'
                Resource: 
                  - !GetAtt SourceBucket.Arn
                  - !Join ['', [!GetAtt SourceBucket.Arn, '/*']]
                  - !GetAtt DestinationBucket.Arn
                  - !Join ['', [!GetAtt DestinationBucket.Arn, '/*']]
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                Resource: 
                  - !GetAtt IngestionMappingTable.Arn
              - Effect: Allow
                Action:
                  - 'kms:Decrypt'
                  - 'kms:GenerateDataKey'
                Resource: 
                  - !GetAtt KmsKeySourceBucket.Arn
                  - !GetAtt KmsKeyDestinationBucket.Arn

  S3CopyDeleteStateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: !Sub '${AWS::StackName}-state-machine'
      RoleArn: !GetAtt StepFunctionsRole.Arn
      DefinitionString: !Sub
        - |-
          {
            "Comment": "S3 Copy and Delete Workflow",
            "StartAt": "GetObjectTagging",
            "States": {
              "GetObjectTagging": {
                "Type": "Task",
                "Parameters": {
                  "Bucket.$": "$.detail.bucket.name",
                  "Key.$": "$.detail.object.key"
                },
                "Resource": "arn:aws:states:::aws-sdk:s3:getObjectTagging",
                "Next": "CheckScanResultTag",
                "ResultSelector": {
                  "ScanResultTag.$": "$.TagSet[?(@.Key=='ScanResult')]"
                },
                "ResultPath": "$.ObjectTags"
              },
              "CheckScanResultTag": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.ObjectTags.ScanResultTag[0].Value",
                    "StringEquals": "CLEAN",
                    "Next": "GetPrefix"
                  }
                ],
                "Default": "SkipProcessing"
              },
              "GetPrefix": {
                "Type": "Pass",
                "Next": "Parallel",
                "ResultPath": "$.extracted",
                "Parameters": {
                  "fullKey.$": "$.detail.object.key",
                  "splitKey.$": "States.StringSplit($.detail.object.key, '/')",
                  "prefix.$": "States.ArrayGetItem(States.StringSplit($.detail.object.key, '/'), 0)"
                }
              },
              "Parallel": {
                "Type": "Parallel",
                "Next": "VerifyChecksum",
                "Branches": [
                  {
                    "StartAt": "GetLabDestinationBucket",
                    "States": {
                      "GetLabDestinationBucket": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::dynamodb:getItem",
                        "Parameters": {
                          "TableName": "${IngestionMappingTable}",
                          "Key": {
                            "lab": {
                              "S.$": "$.extracted.prefix"
                            }
                          }
                        },
                        "ResultPath": "$.DestinationBucket",
                        "ResultSelector": {
                          "Item.$": "$.Item"
                        },
                        "Next": "GetObjectAttributes"
                      },
                      "GetObjectAttributes": {
                        "Type": "Task",
                        "Parameters": {
                          "Bucket.$": "$.detail.bucket.name",
                          "Key.$": "$.detail.object.key",
                          "ObjectAttributes": [
                            "Checksum"
                          ]
                        },
                        "Resource": "arn:aws:states:::aws-sdk:s3:getObjectAttributes",
                        "ResultPath": "$.SourceObjectAttributes",
                        "Next": "Checksum exists"
                      },
                      "Checksum exists": {
                        "Type": "Choice",
                        "Choices": [
                          {
                            "Variable": "$.SourceObjectAttributes.Checksum.ChecksumSHA256",
                            "IsPresent": true,
                            "Next": "CopyS3Object"
                          }
                        ],
                        "Default": "Fail"
                      },
                      "Fail": {
                        "Type": "Fail",
                        "Cause": "Unable to find a Checksum on source object"
                      },
                      "CopyS3Object": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::aws-sdk:s3:copyObject",
                        "Parameters": {
                          "Bucket.$": "$.DestinationBucket.Item.s3BucketName.S",
                          "CopySource.$": "States.Format('{}/{}', $.detail.bucket.name, $.detail.object.key)",
                          "ChecksumAlgorithm": "SHA256",
                          "Key.$": "$.detail.object.key"
                        },
                        "ResultPath": "$.DestinationObject",
                        "ResultSelector": {
                          "Etag.$": "States.StringToJson($.CopyObjectResult.ETag)",
                          "Checksum.$": "$.CopyObjectResult.ChecksumSHA256"
                        },
                        "End": true
                      }
                    }
                  }
                ],
                "Retry": [
                  {
                    "ErrorEquals": [
                      "States.Timeout"
                    ],
                    "BackoffRate": 5,
                    "IntervalSeconds": 5,
                    "MaxAttempts": 3,
                    "Comment": "Timeout Handling"
                  }
                ],
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Next": "CopyFailed"
                  }
                ],
                "ResultSelector": {
                  "source-object": {
                    "bucket-name.$": "$.[0].detail.bucket.name",
                    "key.$": "$.[0].detail.object.key",
                    "Checksum.$": "$.[0].SourceObjectAttributes.Checksum.ChecksumSHA256"
                  },
                  "target-object": {
                    "bucket-name.$": "$.[0].DestinationBucket.Item.s3BucketName.S",
                    "key.$": "$.[0].detail.object.key",
                    "Checksum.$": "$.[0].DestinationObject.Checksum"
                  }
                }
              },
              "VerifyChecksum": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.source-object.Checksum",
                    "StringEqualsPath": "$.target-object.Checksum",
                    "Next": "DeleteSourceObject"
                  }
                ],
                "Default": "DeleteDestinationObject"
              },
              "DeleteDestinationObject": {
                "Type": "Task",
                "Parameters": {
                  "Bucket.$": "$.target-object.bucket-name",
                  "Key.$": "$.target-object.key"
                },
                "Resource": "arn:aws:states:::aws-sdk:s3:deleteObject",
                "Next": "CopyFailed"
              },
              "DeleteSourceObject": {
                "Type": "Task",
                "Resource": "arn:aws:states:::aws-sdk:s3:deleteObject",
                "Parameters": {
                  "Bucket.$": "$.source-object.bucket-name",
                  "Key.$": "$.source-object.key"
                },
                "End": true
              },
              "CopyFailed": {
                "Type": "Fail",
                "Cause": "Checksum verification failed",
                "Error": "ChecksumMismatch"
              },
              "SkipProcessing": {
                "Type": "Succeed"
              }
            }
          }
        - {DestinationBucketName: !Ref DestinationBucket}

  EventBridgeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: InvokeStepFunction
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'states:StartExecution'
                Resource: !Ref S3CopyDeleteStateMachine

  EventBridgeRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: "Rule to trigger Step Function when Object Tags are added to S3 Object"
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - "Object Tags Added"
        detail:
          bucket:
            name:
              - !Ref SourceBucket
          object:
            key:
              - wildcard: "*/import/*"
      State: ENABLED
      Targets:
        - Arn: !Ref S3CopyDeleteStateMachine
          Id: "TriggerStepFunction"
          RoleArn: !GetAtt EventBridgeRole.Arn

Outputs:
  SourceBucketName:
    Description: "Name of the source S3 bucket"
    Value: !Ref SourceBucket
  DestinationBucketName:
    Description: "Name of the destination S3 bucket"
    Value: !Ref DestinationBucket
  StateMachineArn:
    Description: "ARN of the Step Functions state machine"
    Value: !Ref S3CopyDeleteStateMachine
