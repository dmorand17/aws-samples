AWSTemplateFormatVersion: '2010-09-09'
Description: |-
  CloudFormation template to demonstrate a step function workflow
  Once the objects have been scanned, the step function will be invoked

Resources:

  # Create 2 KMS keys one for the source bucket and one for destination bucket
  KmsKeySourceBucket:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: 'KMS Key for Source Bucket'
      Enabled: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: 'key-default-1'
        Statement:
          - Sid: 'Enable IAM User Permissions'
            Effect: 'Allow'
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'

  KmsKeyDestinationBucket:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: 'KMS Key for Destination Bucket'
      Enabled: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: 'key-default-1'
        Statement:
          - Sid: 'Enable IAM User Permissions'
            Effect: 'Allow'
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'

  SourceBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${AWS::StackName}-source-bucket'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !GetAtt KmsKeySourceBucket.Arn
              SSEAlgorithm: aws:kms
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  DestinationBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${AWS::StackName}-destination-bucket'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !GetAtt KmsKeyDestinationBucket.Arn
              SSEAlgorithm: aws:kms
      VersioningConfiguration:
        Status: Enabled

  IngestionMappingTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${AWS::StackName}-ingestion-mapping'
      AttributeDefinitions:
        - AttributeName: lab
          AttributeType: S
      KeySchema:
        - AttributeName: lab
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  StepFunctionsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: StepFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:GetObjectTagging'
                  - 's3:PutObjectTagging'
                  - 's3:GetObjectVersionTagging'
                  - 's3:GetObjectAttributes'
                Resource: 
                  - !GetAtt SourceBucket.Arn
                  - !Join ['', [!GetAtt SourceBucket.Arn, '/*']]
                  - !GetAtt DestinationBucket.Arn
                  - !Join ['', [!GetAtt DestinationBucket.Arn, '/*']]
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                Resource: 
                  - !GetAtt IngestionMappingTable.Arn
              - Effect: Allow
                Action:
                  - 'kms:Decrypt'
                  - 'kms:GenerateDataKey'
                Resource: 
                  - !GetAtt KmsKeySourceBucket.Arn
                  - !GetAtt KmsKeyDestinationBucket.Arn

  S3CopyDeleteStateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: !Sub '${AWS::StackName}-state-machine'
      RoleArn: !GetAtt StepFunctionsRole.Arn
      DefinitionString: !Sub
        - |-
          {
            "Comment": "S3 Copy and Delete Workflow",
            "StartAt": "GetObjectTagging",
            "States": {
              "GetObjectTagging": {
                "Type": "Task",
                "Parameters": {
                  "Bucket.$": "$.detail.bucket.name",
                  "Key.$": "$.detail.object.key"
                },
                "Resource": "arn:aws:states:::aws-sdk:s3:getObjectTagging",
                "Next": "CheckScanResultTag",
                "ResultSelector": {
                  "ScanResultTag.$": "$.TagSet[?(@.Key=='ScanResult')]"
                },
                "ResultPath": "$.ObjectTags"
              },
              "CheckScanResultTag": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.ObjectTags.ScanResultTag[0].Value",
                  "StringEquals": "CLEAN",
                  "Next": "GetPrefix"
                }
              ],
              "Default": "SkipProcessing"
              },
            "GetPrefix": {
              "Type": "Pass",
              "Next": "GetLabDestinationBucket",
              "ResultPath": "$.extracted",
                    "Parameters": {
                      "fullKey.$": "$.detail.object.key",
                      "splitKey.$": "States.StringSplit($.detail.object.key, '/')",
                      "prefix.$": "States.ArrayGetItem(States.StringSplit($.detail.object.key, '/'), 0)"
                }            
            },
            "GetLabDestinationBucket": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:getItem",
              "Parameters": {
                "TableName": "${IngestionMappingTable}",
                "Key": {
                  "lab": {
                    "S.$": "$.extracted.prefix"
                  }
                }
              },
              "Next": "GetObjectAttributes",
              "ResultPath": "$.DestinationBucket",
                "ResultSelector": {
                  "Item.$": "$.Item"
                },
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "CopyFailed"
                }]
              },
              "GetObjectAttributes": {
                "Type": "Task",
                "Parameters": {
                  "Bucket.$": "$.detail.bucket.name",
                  "Key.$": "$.detail.object.key",
                  "ObjectAttributes": [
                    "Checksum"
                  ]
                },
                "Resource": "arn:aws:states:::aws-sdk:s3:getObjectAttributes",
                "Next": "CopyS3Object",
                "ResultPath": "$.SourceObjectAttributes"
              },              
              "CopyS3Object": {
                "Type": "Task",
                "Resource": "arn:aws:states:::aws-sdk:s3:copyObject",
                "Parameters": {
                  "Bucket.$": "$.DestinationBucket.Item.s3BucketName.S",
                  "CopySource.$": "States.Format('{}/{}', $.detail.bucket.name, $.detail.object.key)",
                  "ChecksumAlgorithm": "SHA256",
                  "Key.$": "$.detail.object.key"
                },
                "Next": "VerifyMD5Checksum",
                "ResultPath": "$.DestinationObject",
                "ResultSelector": {
                  "Etag.$": "States.StringToJson($.CopyObjectResult.ETag)",
                  "Checksum.$": "$.CopyObjectResult.ChecksumSHA256"
                }                
              },
              "VerifyMD5Checksum": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.DestinationObject.Checksum",
                    "StringEqualsPath": "$.SourceObjectAttributes.Checksum.ChecksumSHA256",
                    "Next": "DeleteSourceObject"
                  }
                ],
                "Default": "DeleteDestinationObject"
              },
              "DeleteDestinationObject": {
                "Type": "Task",
                "Parameters": {
                  "Bucket.$": "$.DestinationBucket.Item.s3BucketName.S",
                  "Key.$": "$.detail.object.key"
                },
                "Resource": "arn:aws:states:::aws-sdk:s3:deleteObject",
                "Next": "CopyFailed"
              },              
              "DeleteSourceObject": {
                "Type": "Task",
                "Resource": "arn:aws:states:::aws-sdk:s3:deleteObject",
                "Parameters": {
                  "Bucket.$": "$.detail.bucket.name",
                  "Key.$": "$.detail.object.key"
                },
                "End": true
              },
              "CopyFailed": {
                "Type": "Fail",
                "Cause": "MD5 checksum verification failed",
                "Error": "ChecksumMismatch"
              },
              "SkipProcessing": {
                "Type": "Succeed"
              }              
            }
          }
        - {DestinationBucketName: !Ref DestinationBucket}

  EventBridgeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: InvokeStepFunction
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'states:StartExecution'
                Resource: !Ref S3CopyDeleteStateMachine

  EventBridgeRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: "Rule to trigger Step Function when Object Tags are added to S3 Object"
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - "Object Tags Added"
        detail:
          bucket:
            name:
              - !Ref SourceBucket
          object:
            key:
              - wildcard: "*/import/*"
      State: ENABLED
      Targets:
        - Arn: !Ref S3CopyDeleteStateMachine
          Id: "TriggerStepFunction"
          RoleArn: !GetAtt EventBridgeRole.Arn

Outputs:
  SourceBucketName:
    Description: "Name of the source S3 bucket"
    Value: !Ref SourceBucket
  DestinationBucketName:
    Description: "Name of the destination S3 bucket"
    Value: !Ref DestinationBucket
  StateMachineArn:
    Description: "ARN of the Step Functions state machine"
    Value: !Ref S3CopyDeleteStateMachine
