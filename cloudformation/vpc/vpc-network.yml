AWSTemplateFormatVersion: '2010-09-09'
Description: Create VPC with locked down default security group

# Add parameters
Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for VPC
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
  VpcName:
    Type: String
    Default: MyVPC
    Description: Name for VPC
    AllowedPattern: ^[a-zA-Z0-9-_]*$
    ConstraintDescription: VPC name can include numbers, letters, hyphens, and underscores. No spaces.
  VpcInstanceTenancy:
    Type: String

Resources:
  MyVPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
  
  MyDefaultSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Default security group
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - CidrIp: 127.0.0.1/32
          IpProtocol: icmp
          
  NoInboundRule: 
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt MyDefaultSecurityGroup.GroupId
      IpProtocol: -1
      FromPort: 0
      ToPort: 65535
      CidrIp: 0.0.0.0/0

  # Add an internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref VpcName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref MyVPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt MyVPC.CidrBlock, 4, 8 ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt MyVPC.CidrBlock, 4, 8 ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2

  NATGateway1:
     Type: AWS::EC2::NatGateway
     Properties:
       AllocationId: !GetAtt NATGateway1EIP.AllocationId 
       SubnetId: !Ref PublicSubnet1

  NATGateway1EIP:  
    Type: AWS::EC2::EIP
    Properties: 
      Domain: vpc

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt MyVPC.CidrBlock, 4, 8 ]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt MyVPC.CidrBlock, 4, 8 ]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 2
