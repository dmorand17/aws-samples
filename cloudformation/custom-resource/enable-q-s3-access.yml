AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This CloudFormation template is used to create the following:
  - S3 bucket
  - CloudFront distribution (s3 bucket is origin)
  - Lambda Function (triggered for Create events on S3 bucket to create Amazon Q metadat)

Parameters:
  BucketName:
    Type: String
    Description: Name of the S3 bucket

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      # Add account number to end of bucket name
      BucketName: !Sub ${BucketName}-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub 's3-access-control-${AWS::StackName}'
        Description: !Sub 'Access control for ${AWS::StackName}'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontWebDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
          TargetOriginId: origin-bucket
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - Id: origin-bucket
            DomainName: !GetAtt S3Bucket.RegionalDomainName
            S3OriginConfig: {}
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        PriceClass: PriceClass_100

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub ${S3Bucket.Arn}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontWebDistribution}

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: S3BucketPutObject
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowPutObject
                Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                    - !Sub 'arn:aws:s3:::${S3Bucket}'
                    - !Sub 'arn:aws:s3:::${S3Bucket}/*'

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          import os

          s3 = boto3.client('s3')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              bucket_name = event['Records'][0]['s3']['bucket']['name']
              file_key = event['Records'][0]['s3']['object']['key']
              file_name = os.path.basename(file_key)

              try:
                  file_obj = s3.get_object(Bucket=bucket_name, Key=file_key)
                  file_content = file_obj['Body'].read()
              except Exception as e:
                  print(f'Error downloading file: {e}')
                  return

              # Add CLOUDFRONT_DISTRIBUTION_DOMAIN to _source_uri
              metadata = {
                'Attributes': {
                  '_source_uri': f'https://{os.environ["CLOUDFRONT_DISTRIBUTION_DOMAIN"]}/{file_key}',
                },
              }

              metadata_file_key = f'/metadata/{file_name}.metadata.json'
              try:
                  logging.info(f'Uploading metadata file: {metadata_file_key}')
                  s3.put_object(Bucket=bucket_name, Key=metadata_file_key, Body=json.dumps(metadata))
                  logging.info(f'Uploaded metadata file: {metadata_file_key}')
              except Exception as e:
                  print(f'Error uploading metadata file: {e}')

              return {
                  'statusCode': 200,
                  'body': json.dumps(f'Processed file: {file_key}')
              }
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.10
      Environment:
        Variables:
          CLOUDFRONT_DISTRIBUTION_DOMAIN: !GetAtt CloudFrontWebDistribution.DomainName

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt S3Bucket.Arn

  ApplyNotificationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3BucketNotificationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowBucketNotification
                Effect: Allow
                Action: s3:PutBucketNotification
                Resource:
                  - !Sub 'arn:aws:s3:::${S3Bucket}'
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'



  # This is a work around because S3 event notification is not its own CloudFormation resource 
  #  and must be added after deployment to avoid circular dependency
  ApplyBucketNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Adds an event notification to a S3 bucket
      Handler: index.handler
      Runtime: python3.10
      Role: !GetAtt 'ApplyNotificationFunctionRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import boto3
          import logging
          import json
          import cfnresponse

          s3Client = boto3.client('s3')
          logger = logging.getLogger()
          logger.setLevel(logging.DEBUG)

          def addBucketNotification(bucketName, notificationId, functionArn):
            notificationResponse = s3Client.put_bucket_notification_configuration(
              Bucket=bucketName,
              NotificationConfiguration={
                'LambdaFunctionConfigurations': [
                  {
                    'Id': notificationId,
                    'LambdaFunctionArn': functionArn,
                    'Events': [
                      's3:ObjectCreated:*'
                    ],
                    'Filter': {
                      'Key': {
                        'FilterRules': [
                          {
                            'Name': 'prefix',
                            'Value': '.jpg'
                          }
                        ]
                      }
                    }
                  },
                ]
              }
            )
            return notificationResponse

          def create(properties, physical_id):
            bucketName = properties['S3Bucket']
            notificationId = properties['NotificationId']
            functionArn = properties['FunctionARN']
            response = addBucketNotification(bucketName, notificationId, functionArn)
            logger.info(f'AddBucketNotification response: {json.dumps(response)}')
            return cfnresponse.SUCCESS, physical_id

          def update(properties, physical_id):
            return cfnresponse.SUCCESS, None

          def delete(properties, physical_id):
            return cfnresponse.SUCCESS, None

          def handler(event, context):
            logger.info('Received event: %s' % json.dumps(event))

            status = cfnresponse.FAILED
            new_physical_id = None

            try:
              properties = event.get('ResourceProperties')
              physical_id = event.get('PhysicalResourceId')

              status, new_physical_id = {
                'Create': create,
                'Update': update,
                'Delete': delete
              }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)
            except Exception as e:
              logger.error('Exception: %s' % e)
              status = cfnresponse.FAILED
            finally:
              cfnresponse.send(event, context, status, {}, new_physical_id)

  ApplyNotification:
    Type: Custom::ApplyNotification
    Properties:
      ServiceToken: !GetAtt 'ApplyBucketNotificationFunction.Arn'
      S3Bucket: !Ref 'S3Bucket'
      FunctionARN: !GetAtt 'LambdaFunction.Arn'
      NotificationId: S3ObjectCreatedEvent

Outputs:
  BucketName:
    Value: !Ref S3Bucket
    Description: Name of the S3 bucket
  CloudFrontDistributionDomain:
    Value: !GetAtt CloudFrontWebDistribution.DomainName
    Description: Domain name of the CloudFront distribution
