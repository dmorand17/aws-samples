AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This CloudFormation template is used to create the following:
  - S3 bucket
  - CloudFront distribution (s3 bucket is origin)
  - Lambda Function (triggered for Create/Delete events on S3 bucket to manage Amazon Q metadata)

Parameters:
  BucketName:
    Type: String
    Description: Name of the S3 bucket

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    # DeletionPolicy: Retain
    # UpdateReplacePolicy: Retain
    Properties:
      # Add account number to end of bucket name
      BucketName: !Sub ${BucketName}-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  S3EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: EventBridge Rule to trigger Lambda for PutObject events
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - Object Created
          - Object Deleted
        detail:
          bucket:
            name:
              - !Ref S3Bucket
          object:
            key:
              - anything-but:
                  suffix: ".metadata.json"
      State: ENABLED
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: LambdaFunctionTarget
          RetryPolicy:
            MaximumEventAgeInSeconds: 120
            MaximumRetryAttempts: 2

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub 's3-access-control-${AWS::StackName}'
        Description: !Sub 'Access control for ${AWS::StackName}'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontWebDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
          TargetOriginId: origin-bucket
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - Id: origin-bucket
            DomainName: !GetAtt S3Bucket.RegionalDomainName
            S3OriginConfig: {}
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        PriceClass: PriceClass_100

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub ${S3Bucket.Arn}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontWebDistribution}

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: S3BucketPutObject
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowCreateDelete
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                    - !Sub 'arn:aws:s3:::${S3Bucket}'
                    - !Sub 'arn:aws:s3:::${S3Bucket}/*'

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: /Users/domorand/workspace/work/amazon-q/enable-q-for-s3/lambda
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.10
      Environment:
        Variables:
          CLOUDFRONT_DISTRIBUTION_DOMAIN: !GetAtt CloudFrontWebDistribution.DomainName

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: events.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt S3EventBridgeRule.Arn

Outputs:
  BucketName:
    Value: !Ref S3Bucket
    Description: Name of the S3 bucket
  CloudFrontDistributionDomain:
    Value: !GetAtt CloudFrontWebDistribution.DomainName
    Description: Domain name of the CloudFront distribution
